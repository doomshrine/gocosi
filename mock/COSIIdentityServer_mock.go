// Code generated by mockery v2.32.0. DO NOT EDIT.

package mock

import (
	context "context"

	cosi "sigs.k8s.io/container-object-storage-interface-spec"

	mock "github.com/stretchr/testify/mock"
)

// MockCOSIIdentityServer is an autogenerated mock type for the COSIIdentityServer type
type MockCOSIIdentityServer struct {
	mock.Mock
}

type MockCOSIIdentityServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCOSIIdentityServer) EXPECT() *MockCOSIIdentityServer_Expecter {
	return &MockCOSIIdentityServer_Expecter{mock: &_m.Mock}
}

// DriverGetInfo provides a mock function with given fields: _a0, _a1
func (_m *MockCOSIIdentityServer) DriverGetInfo(_a0 context.Context, _a1 *cosi.DriverGetInfoRequest) (*cosi.DriverGetInfoResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *cosi.DriverGetInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cosi.DriverGetInfoRequest) (*cosi.DriverGetInfoResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cosi.DriverGetInfoRequest) *cosi.DriverGetInfoResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cosi.DriverGetInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cosi.DriverGetInfoRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCOSIIdentityServer_DriverGetInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DriverGetInfo'
type MockCOSIIdentityServer_DriverGetInfo_Call struct {
	*mock.Call
}

// DriverGetInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *cosi.DriverGetInfoRequest
func (_e *MockCOSIIdentityServer_Expecter) DriverGetInfo(_a0 interface{}, _a1 interface{}) *MockCOSIIdentityServer_DriverGetInfo_Call {
	return &MockCOSIIdentityServer_DriverGetInfo_Call{Call: _e.mock.On("DriverGetInfo", _a0, _a1)}
}

func (_c *MockCOSIIdentityServer_DriverGetInfo_Call) Run(run func(_a0 context.Context, _a1 *cosi.DriverGetInfoRequest)) *MockCOSIIdentityServer_DriverGetInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*cosi.DriverGetInfoRequest))
	})
	return _c
}

func (_c *MockCOSIIdentityServer_DriverGetInfo_Call) Return(_a0 *cosi.DriverGetInfoResponse, _a1 error) *MockCOSIIdentityServer_DriverGetInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCOSIIdentityServer_DriverGetInfo_Call) RunAndReturn(run func(context.Context, *cosi.DriverGetInfoRequest) (*cosi.DriverGetInfoResponse, error)) *MockCOSIIdentityServer_DriverGetInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCOSIIdentityServer creates a new instance of MockCOSIIdentityServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCOSIIdentityServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCOSIIdentityServer {
	mock := &MockCOSIIdentityServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
